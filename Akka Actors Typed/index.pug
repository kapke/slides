extends ../presentation-template

block theme
    - themeName = "scalac"

block title
    | ActorRef[Typed]

block slides
    +titleSlide("ActorRef[Typed]", true, false)

    +justSentence("Why Scala?")

    +justSentence("Yet we have")

    +justSentence
        pre PartialFunction[Any, Unit]

    +slide(class="to-middle")
        h2
            pre Ctrl+F
            | &nbsp;based navigation

        pre: code.scala.
            class BlockImporter(blockFetcher: ActorRef) extends Actor {
              blockFetcher ! ???
            }

    +justSentence("Mutable-by-default API")

    +slide(class="to-middle")
        pre: code.lang-scala.
            class BlockImporter extends Actor {
              var importedBlocks: List[Block] = Nil

              val importBlocks: List[Block] => Future[Unit]

              def receive = {
                case ImportBlocks(blocks) =>
                  importBlocks(blocks)
                    .onComplete(_ =>
                      importedBlocks = importedBlocks ++ blocks
                    )
              }
            }

    +slide(class="to-middle")
        pre
            code.nohighlight.dimmed.
                class BlockImporter extends Actor {
                  var importedBlocks: List[Block] = Nil

                  val importBlocks: List[Block] => Future[Unit]

                  def receive = {
                    case ImportBlocks(blocks) =>
                      importBlocks(blocks)
                        .onComplete(_ =>

            code.nohighlight.highlighted.
                &nbsp;         importedBlocks = importedBlocks ++ blocks

            code.nohighlight.dimmed.
                &nbsp;     )
                }
              }

    +slide(class="to-middle")
        pre: code.lang-scala.
            def receive = running(Nil)

            def running(importedBlocks: List[Block]) = {
              case ImportBlocks(blocks) =>
                importBlocks(blocks)
                  .onComplete(_ =>
                    context become running(importedBlocks ++ blocks))
            }

    +slide(class="to-middle")
        pre
            code.nohighlight.dimmed.
                def receive = running(Nil)

                def running(importedBlocks: List[Block]) = {
                  case ImportBlocks(blocks) =>
                    importBlocks(blocks)
                      .onComplete(_ =>

            code.nohighlight.highlighted.
                &nbsp;       context become running(importedBlocks ++ blocks))

            code.nohighlight.dimmed.
                }

    +slide(class="to-middle")
        pre
            code.nohighlight.dimmed.
                def receive = notImportingBlocks(Nil)

            code.nohighlight.highlighted.
                &nbsp;
                def notImportingBlocks(importedBlocks: List[Block]) = {
                  case ImportBlocks(blocks) =>
                    context become importingBlocks(importedBlocks)
                    importBlocks(blocks)
                      .map(BlocksImportCompleted(_))
                      .pipeTo(self)
                }

            code.nohighlight.dimmed.
                &nbsp;
                def importingBlocks(importedBlocks: List[Block]) = {
                  case BlocksImportCompleted =>
                    context become notImportingBlocks(importedBlocks ++ blocks)
                }

    +slide(class="to-middle")
        pre
            code.nohighlight.dimmed.
                def receive = notImportingBlocks(Nil)

            code.nohighlight.dimmed.
                &nbsp;
                def notImportingBlocks(importedBlocks: List[Block]) = {
                  case ImportBlocks(blocks) =>
                    context become importingBlocks(importedBlocks)
                    importBlocks(blocks)
                      .map(BlocksImportCompleted(_))
                      .pipeTo(self)
                }

            code.nohighlight.highlighted.
                &nbsp;
                def importingBlocks(importedBlocks: List[Block]) = {
                  case BlocksImportCompleted =>
                    context become notImportingBlocks(importedBlocks ++ blocks)
                }

    +justSentence("Future?")

    +justSentence
        h2 Say hello to&nbsp;
            pre Behavior[T]

    +slide(class="to-middle")
        pre: code.lang-scala.
            package akka.actor.typed.scaladsl

            object Behaviors {
              def receive[T](
                onMessage: (ActorContext[T], T) â‡’ Behavior[T]
              ): Behavior[T]
            }

    +justSentence("In practice it looks as follows:")

    +justSentence("Define your protocol")

    +slide(class="to-middle")
        pre: code.lang-scala.
            sealed trait BlockImporterMsg

            case class ImportBlocks(
              blocks: List[Block],
              respondTo: ActorRef[BlocksImported]
              ) extends BlockImporterMsg
            case class BlocksImported(blocks: List[Block])

            case class BlocksImportCompleted(
              blocks: List[Block]) extends BlockImporterMsg

    +slide(class="to-middle")
        pre
            code.nohighlight.dimmed.
                sealed trait BlockImporterMsg

                case class ImportBlocks(
                  blocks: List[Block],

            code.nohighligh.highlighted.
                  &nbsp; respondTo: ActorRef[BlocksImported]

            code.nohighlight.dimmed.
                &nbsp; ) extends BlockImporterMsg

            code.nohighlight.highlighted.
                case class BlocksImported(blocks: List[Block])

            code.nohighlight.dimmed.
                &nbsp;
                case class BlocksImportCompleted(
                  blocks: List[Block]) extends BlockImporterMsg

    +justSentence("Define the behavior")

    +slide(class="to-middle")
        pre: code.lang-scala.
            object BlockImporter {
              def behavior(importedBlocks: List[Block] = Nil) =
                Behaviors.receive((ctx, msg) =>
                  msg match {
                    case ImportBlocks(blocks, respondTo) =>
                      importBlocks(blocks)
                        .onComplete(_ => {
                          respondTo ! BlocksImported(blocks)
                          ctx.self ! BlocksImportCompleted(blocks)
                        })
                      Behaviors.same
                    case BlocksImportCompleted(blocks) =>
                      behavior(importedBlocks ++ blocks)
                  }
            }

    +slide(class="to-middle")
        pre
            code.nohighlight.dimmed.
                object BlockImporter {
                  def behavior(importedBlocks: List[Block] = Nil) =
                    Behaviors.receive((ctx, msg) =>
                      msg match {
                        case ImportBlocks(blocks, respondTo) =>
                          importBlocks(blocks)
                            .onComplete(_ => {
                              respondTo ! BlocksImported(blocks)
                              ctx.self ! BlocksImportCompleted(blocks)
                            })

            code.nohighlight.highlighted.
                &nbsp;         Behaviors.same

            code.nohighlight.dimmed.
                &nbsp;       case BlocksImportCompleted(blocks) =>

            code.nohighlight.highlighted.
                &nbsp;         behavior(importedBlocks ++ blocks)

            code.nohighlight.dimmed.
                &nbsp;     }
                }

    +justSentence("Now the guardian...")

    +slide(class="to-middle")
        pre: code.lang-scala.
            object Guardian {
              case object Start

              def behavior = Behaviors.setup[Start.type]{ ctx =>
                val importer: ActorRef[BlockImporterMsg] =
                  ctx.spawn(BlockImporter.behavior(), "block-importer")

                Behaviors.receiveMessage {
                  case Start =>
                    importer ! ImportBlocks(blocks)
                    Behaviors.same
                }
              }
            }

    +slide(class="to-middle")
        pre: code.lang-scala.
            object Guardian {
              def behavior = SpawnProtocol.behavior
            }


    +justSentence("And the system")

    +slide(class="to-middle")
        pre: code.lang-scala.
            import akka.actor.typed.ActorSystem

            object Main extends App {
              val system = ActorSystem(Guardian.behavior, "guardian")

              system ! Guardian.Start
            }

    +justSentence
        div
            h2 Wait! Nice "hello, world"
            h2 but I need...

    +justSentence("Logging?")

    +slide(class="to-middle")
        pre: code.
            Behaviors.setup { ctx =>
              ctx.log.debug("in setup")
              someBehavior
            }

            Behaviors.receive((ctx, msg) => {
              ctx.log.debug("msg: {}", msg)
              Behaviors.same
            })

    +slide(class="to-middle")
        pre: code.lang-scala.
            Behaviors.logMessages(otherBehavior)

    +slide(class="to-middle")
        pre: code.lang-scala.
            def behavior: Behavior[SomeMsg] =
              Behaviors
                .intercept(
                  LoggingInterceptor[SomeMsg]())(
                  otherBehavior)

    +slide(class="to-middle")
        pre: code.lang-scala.
            class LoggingInterceptor[M] extends BehaviorInterceptor[M, M] {

              def aroundReceive(
                ctx: ActorContext[M],
                msg: M,
                target: BehaviorInterceptor.ReceiveTarget[M]
              ): Behavior[M] = {
                ctx.asScala.log.debug("Message {}", msg)
                target(ctx, msg)
              }

              def aroundSignal(ctx, signal, target): Behavior[M] = ???
            }

    +justSentence("To handle actor lifecycle?")

    +slide(class="to-middle")
        pre: code.lang-scala.
            Behaviors
              .receive(/* ... */)
              .receiveSignal {
                case (ctx, PostStop) => //PreRestart, Terminated, ChildFailed
                  //cleanup
                  Behaviors.same
              }

    +justSentence("Supervision?")

    +slide(class="to-middle")
        pre: code.lang-scala.
            Behaviors
              .supervise(otherBehavior)
              .onFailure(SupervisorStrategy.restart)

    +justSentence("Managing time?")

    +slide(class="to-middle")
        pre: code.lang-scala.
            val receive = Behaviors.receiveMessage {
              case CheckPeers =>
                //doSth
                Behaviors.same
            }

            Behaviors.withTimers(timers => {
              timers.startPeriodicTimer(
                "check-peers",
                CheckPeers,
                10.seconds)

                receive
            })

    +justSentence("And there's always...")

    +slide(class="to-middle")
        pre: code.lang-scala.
            package akka.actors.typed

            abstract class ExtensibleBehavior[T] extends Behavior[T] {

              def receive(ctx: TypedActorContext[T], msg: T): Behavior[T]

              def receiveSignal(ctx: TypedActorContext[T], msg: Signal): Behavior[T]
            }


    +finalSlides
