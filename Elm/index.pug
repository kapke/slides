extends ../presentation-template

block title
    | Bezbłędny frontend z Elm

block slides
    +titleSlide('Bezbłędny frontend z Elm')

    +slide
        h2 Czym w ogóle jest Elm? I czy ktoś go w ogóle potrzebuje?

        +slide
            img(src="/Elm/reddit-printscreen.png")

    +slide
        h2 A co to w ogóle znaczy, że funkcyjny?

        +slide
            p Niemutowalność danych
            p Bo mutacja danych to efekt uboczny...
        +slide
            p ...a efektów ubocznych brak
            p Funkcja może tylko obliczyć nowy wynik i go zwrócić
        +slide
            p Na szczęście funkcja to też wartość

    +slide
        h2 System typów Damasa–Hindleya–Milnera

        +slide
            h3 Make invalid states impossible to represent
        +slide
            h3 Świetny kompilator

    +slide
        h2 ale miał być do frontendu...

    +slide
        ul
            li The Elm Architecture
            li Wbudowana biblioteka do Virtual DOM
            li Asynchroniczność
            li Porty i flagi

    +slide
        h2 The Elm Architeture - wygląda znajomo?
        pre: code.lang-elm.
            import Html exposing (..)

            main = Html.beginnerProgram { model = 0, update = update, view = view }

            -- MODEL
            type alias Model = Int

            -- Message
            type Msg = MakeCookie

            -- UPDATE
            update : Msg -> Model -> Model
            update msg model =
              case msg of
                MakeCookie -> model + 1

            -- VIEW
            view : Model -> Html Msg
            view model = img [src "img/cookie.jpg", class "cookie", onClick MakeCookie] []

    +slide
        h2 Jako dodatek mamy jeszcze subskrybcje...
        pre: code.lang-elm.
            import Html exposing (..)

            main = Html.program { init = init, subscriptions = subscriptions, update = update, view = view }

            init : (Model, Cmd Msg)
            init = (0, Cmd.none)

            subscriptions : Model -> Sub Msg
            subscriptions model =
                Time.every second MakeCookie

            -- ..

    +slide
        h2 ... i komendy
        pre: code.lang-elm.
            type Msg = RemoveNotification notification | RestOfTypes

            update : Msg -> Model -> (Model, Cmd msg)
            update msg model =
                case msg of
                    AddNotification notification ->
                        (
                            { model
                            | notifications = model.notifications
                                |> List.reverse
                                |> (::) notification
                                |> List.reverse
                            }
                        , Notification.remove RemoveNotification notification
                        )
            -- ..

    +slide
        h3 Efekt? Pełne wsparcie dla asynchronicznych i powtarzających się akcji
        h4 Wbudowane w język

    +slide
        h2 Zadania (czyli Task)
        h3 To takie Promise'y, ale zintegrowane z resztą architektury
        pre: code.lang-elm.
            module Notifications exposing (..)

            add : (Notification -> msg) -> String -> Cmd msg
            add tagger notification =
                Task.perform tagger (Time.now
                    |> map (\time -> round (Time.inMilliseconds time))
                    |> map (\seed -> Random.step (Random.int minInt maxInt) (initialSeed seed))
                    |> map Tuple.first
                    |> map (\id -> Notification notification id))

            remove : (Notification -> msg) -> Notification -> Cmd msg
            remove tagger notification =
                Task.perform tagger (Process.sleep (5 * Time.second)
                    |> Task.andThen (always <| Task.succeed notification))

    +slide
        h2 A jak się dogadać z JS?
        h3 Portami, czyli przerzucamy wartości przez wielki mur - najpierw do JS
        pre: code.lang-elm.
            port module User exposing (..)

            import Json.Decode

            port getUserId : String -> Cmd msg

            port userId : (String -> msg) -> Sub msg

    +slide
        h3 ... po czym JS rzuca do nas odpowiedzi
        pre: code.lang-javascript.
            import * as Elm from './Main';


            const app = Elm.Main.embed(document.getElementById('app'));

            app.ports.getUserId.subscribe(() => {
                getUserId()
                    .then((userId) => app.ports.userId.send(userId));
            });

    +slide
        h2 Ok, coś jeszcze?
        ul
            li Biblioteka do Http
            li Biblioteki z różnymi strukturami danych
            li Biblioteki do obsługi JSON
            li Własne operatory
            li Pełne sprawdzanie typów w trakcie działania programu
            li Świetny kompilator
            li Union Types
            li Prostota

    +slide
        h2 Czyli święty Graal na frontend?

        +slide
            a(href="https://medium.com/@eeue56/top-6-ways-to-make-your-elm-app-crash-at-runtime-562b2fa92d70") Nie dla każdego

    +slide
        ul
            li: a(href="https://www.youtube.com/watch?v=XsNk5aOpqUc#t=4m30s") Podsumowanie NoRedInk
            li: a(href="https://blog.noredink.com/post/126978281075/walkthrough-introducing-elm-to-a-js-web-app") Podsumowanie NoRedInk#2
            li: a(href="https://legacy.gitbook.com/book/mordrax/elm-at-phd/details") Artykuł o Elm w Pacific Health Dynamics

    +finalSlide
