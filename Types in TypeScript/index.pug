extends ../presentation-template

block title
    | Types in TypeScript

block slides
    +titleSlide('Types in TypeScript')

    +slide
        h2 Czy ja w ogólę potrzebuję jakichś tam typów?

    +slide
        h2 No dobra, to jak je w ogóle zadeklarować?

    +slide
        h2 Ano tak:
        pre: code.
            let variable: SomeType;
            const constant : SomeClass = new SomeClass()

            function (arg: ArgType) : ReturnType {}

    +slide
        h2 Typy podstawowe
        ul
            li Boolean/boolean
            li Number/number
            li String/string

    +slide
        h2 Ej, ej, a te z []?
        pre: code.
            let variable1 : Type[]; //Tablica obiektów typu "type"
            let variable2: Array&lt;Type&gt;; // jak wyżej
            let variable3 : [Type1, Type2]; //Krotka (tuple)

    +slide
        h2 To jak mam opisać np. produkt?
        pre: code.
            class Product {
                constructor (public name: string, public price: number) {}
            }

            type Product = {
                name: string;
                price: number;
            }

            interface Product {
                name: string;
                price: number;
            }

    +slide
        h2 A jak zrobić opcjonalne pole z opisem?

    +slide
        h2 Pole opcjonalne
        pre: code.
            interface Product {
                ...
                description?: string;
            }

            interface Product {
                ...
                description: string | null;
            }

            interface Product {
                ...
                description: string | undefined;
            }

    +slide
        h2 No ok, ale chcę dodać paginację, nie będę robił przecież paginatora dla każdej encji!

    +slide
        h2 Nie, zdefiniujesz typ generyczny, o tak:
        pre: code.
            class Paginator&lt;T&gt; {
                constructor (private allElements: T[]) {}

                getPage (nr: number): T[] {}
            }

    +slide
        h2 A jak mam niby zdefiniować, że w danej zmiennej może być cokolwiek? Np. w jakimś kliencie Http?

    +slide
        pre: code.
            interface HttpClient {
                post (url: string, data: any): Promise&lt;any&gt;
                put (url: string, data: object): Promise&lt;any&gt;
                patch (url: string, data: Object): Promise&lt;any&gt;
            }

    +slide
        h2 Ale takie jQuery na przykład jeszcze ma callbacka, ja też chcę!

    +slide
        pre: code.
            interface HttpClient {
                get (url: string, callback: (data: any) =&gt; void): void;
                delete (url: string, callback: (data: any) =&gt; void): void;
            }

    +slide
        h2 A czy mogę jakoś zrobić, by moja wewnętrzna metoda "makeRequest" mogła przyjmować tylko określone wartości?

    +slide
        h2 Tak, z union types albo enumami
        pre: code.
            type HttpMethod = "get" | "post" | "delete";

            makeRequest("get");

            enum HttpMethod {Get, Post, Delete};

            makeRequest(HttpMethod.Get);

    +slide
        h2 Ale to "any" praktycznie wyłącza mi tam sprawdzanie typów!
        pre: code.
            interface HttpClient {
                get&lt;T&gt;(url: string): Promise&lt;T&gt;;
            }

            function makeGet&lt;T&gt; (url: string): Promise&lt;T&gt; {};

            const makeGet = &lt;T&gt;(url: string): Promise&lt;T&gt; => {}

    +slide
        h2 No ok, a co jak się spodziewam, że mam jakiś konkretny typ a deklaracje mówią inaczej?

    +slide
        h2 Na to są 2 rozwiązania:
        ul
            li Rzutowanie
            li Type guard

    +slide
        h2 Rzutowanie
        pre: code.
            let variable: string|number;

            const string1 = variable as string;
            const string2 = &lt;string&gt;variable;

    +slide
        h2 Type guard
        pre: code.
            function isProduct (product: any) product is Product {
                return product.name && product.price;
            }

            let productOrCategory: Product | Category;

            if (isProduct(productOrCategory)) {
                //Product
            }

    +slide
        h2 No działa, ale jak mam wyświetlić listę wyników wyszukiwania, na której są i produkty i kategorie?

    +slide
        h2 Wykorzystując union types
        pre: code.
            interface Category {
                name: string;
                image: string;
                products: Product[];
            }

            interface Product {
                name: string;
                image: string;
                price: Money;
            }

            type SearchResultItem = Category | Product;

            let item : SearchResultItem;
            item.name; //OK;
            item.image; //OK;
            item.price //Error

    +slide
        h2 No, prawie, działa, bo backend do wyniku wyszukiwania dodaje link do szczegółów...
        pre: code.
            type WithDetailsLink = {detailsUrl: string;};
            type ProductOrCategory = Product | Category;

            type SearchResultsItem = ProductOrCategory & WithDetailsLink;

            let item : SearchResultsItem;
            item.detailsUrl; // OK

    +slide
        h2 Swoją drogą, w JS Intersection Types są dość popularne w różnych bibliotekach:
        pre: code.
            function assign&lt;T, U&gt; (t: T, u: U): T&U {}

    +slide
        h2 Podobnie jak te kilka wytrychów:
        pre: code.
            type Flags = { [name: string]: boolean};
            type Flags = Record&lt;string, boolean&gt;

            function get&lt;T, U extends keyof T&gt;(obj: T, key: U): T[U] {}

            type Partial&lt;T&gt; = { //wbudowane w TypeScript
                [P in keyof T]?: T[P];
            }

    +finalSlide
